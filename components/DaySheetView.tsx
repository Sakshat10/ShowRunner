import React from 'react';
import type { Tour, ScheduleEvent, Person } from '../types';
import { ClockIcon, MapPinIcon, ClipboardListIcon, PrinterIcon, XIcon } from './IconComponents';

interface DaySheetViewProps {
    tour: Tour;
    schedule: ScheduleEvent[];
    user: Person;
    date: string;
    onClose: () => void;
}

export const DaySheetView: React.FC<DaySheetViewProps> = ({ tour, schedule, user, date, onClose }) => {
    
    const eventsForDay = schedule.filter(e => e.date === date && e.assignedTo.some(a => a.personId === user.id));
    const tasksForDay = eventsForDay.flatMap(e => e.tasks || []).filter(t => t.assignedTo === user.id);

    return (
        <div className="fixed inset-0 bg-slate-100 z-50 p-4 sm:p-6 lg:p-8">
            <div className="max-w-4xl mx-auto bg-white p-8 shadow-2xl rounded-lg">
                <div className="flex justify-between items-start">
                    <div>
                        <h1 className="text-3xl font-bold">{tour.artistName} - Day Sheet</h1>
                        <p className="text-lg text-slate-500">{new Date(date).toLocaleDateString(undefined, { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</p>
                        <p className="text-lg font-semibold text-blue-600">{user.name} ({user.role})</p>
                    </div>
                    <div className="flex gap-2">
                        <button onClick={() => window.print()} className="p-2 rounded-lg hover:bg-slate-100"><PrinterIcon className="w-6 h-6 text-slate-600" /></button>
                        <button onClick={onClose} className="p-2 rounded-lg hover:bg-slate-100"><XIcon className="w-6 h-6 text-slate-600" /></button>
                    </div>
                </div>
                
                <div className="mt-8">
                    <h2 className="text-2xl font-bold border-b-2 border-slate-800 pb-2 mb-4">Schedule</h2>
                    {eventsForDay.length > 0 ? (
                        <div className="space-y-4">
                        {eventsForDay.map(event => (
                            <div key={event.id}>
                                <p className="font-bold text-lg">{event.title}</p>
                                <div className="flex items-center gap-4 text-slate-600 pl-4">
                                    <span className="flex items-center gap-1.5"><ClockIcon className="w-4 h-4" /> {event.startTime}{event.endTime && ` - ${event.endTime}`}</span>
                                    <span className="flex items-center gap-1.5"><MapPinIcon className="w-4 h-4" /> {event.location}</span>
                                </div>
                            </div>
                        ))}
                        </div>
                    ) : <p className="text-slate-500">No scheduled events for today.</p>}
                </div>
                
                 <div className="mt-8">
                    <h2 className="text-2xl font-bold border-b-2 border-slate-800 pb-2 mb-4 flex items-center gap-2"><ClipboardListIcon className="w-6 h-6"/> Tasks</h2>
                     {tasksForDay.length > 0 ? (
                        <ul className="space-y-2">
                        {tasksForDay.map(task => (
                             <li key={task.id} className="flex items-center gap-3">
                                <div className="w-5 h-5 border-2 border-slate-400 rounded-sm"></div>
                                <span className={task.completed ? 'line-through text-slate-400' : ''}>{task.text}</span>
                            </li>
                        ))}
                        </ul>
                     ) : <p className="text-slate-500">No tasks assigned for today.</p>}
                </div>
                 <div className="mt-12 text-center text-xs text-slate-400">
                    Generated by ShowRunner
                </div>
            </div>
        </div>
    );
};